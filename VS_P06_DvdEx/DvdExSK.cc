// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.

#include "DvdEx.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_2;



void
DvdEx::DvdExMedia::operator>>= (cdrStream &_n) const
{
  ObjectId >>= _n;
  ProviderId >>= _n;
  Type >>= _n;
  _n.marshalString(Title,0);
  _n.marshalString(ProductionCountry,0);
  ProductionYear >>= _n;
  Length >>= _n;
  Status >>= _n;

}

void
DvdEx::DvdExMedia::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)ObjectId <<= _n;
  (::CORBA::Long&)ProviderId <<= _n;
  (Genre&)Type <<= _n;
  Title = _n.unmarshalString(0);
  ProductionCountry = _n.unmarshalString(0);
  (::CORBA::Short&)ProductionYear <<= _n;
  (::CORBA::Short&)Length <<= _n;
  (StatusType&)Status <<= _n;

}

void
DvdEx::DvdExProvider::operator>>= (cdrStream &_n) const
{
  ObjectId >>= _n;
  _n.marshalString(Name,0);
  _n.marshalString(FirstName,0);
  ZIPCode >>= _n;
  _n.marshalString(Address,0);

}

void
DvdEx::DvdExProvider::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)ObjectId <<= _n;
  Name = _n.unmarshalString(0);
  FirstName = _n.unmarshalString(0);
  (::CORBA::Long&)ZIPCode <<= _n;
  Address = _n.unmarshalString(0);

}

::CORBA::Exception::insertExceptionToAny DvdEx::ServerException::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP DvdEx::ServerException::insertToAnyFnNCP = 0;

DvdEx::ServerException::ServerException(const DvdEx::ServerException& _s) : ::CORBA::UserException(_s)
{
  reason = _s.reason;

}

DvdEx::ServerException::ServerException(const char* _reason)
{
  pd_insertToAnyFn    = DvdEx::ServerException::insertToAnyFn;
  pd_insertToAnyFnNCP = DvdEx::ServerException::insertToAnyFnNCP;
  reason = _reason;

}



DvdEx::ServerException& DvdEx::ServerException::operator=(const DvdEx::ServerException& _s)
{
  if (&_s != this) {
    ((::CORBA::UserException*) this)->operator=(_s);
    reason = _s.reason;

  }
  return *this;
}

DvdEx::ServerException::~ServerException() {}

void DvdEx::ServerException::_raise() const { throw *this; }

const char* DvdEx::ServerException::_PD_repoId = "IDL:DvdEx/ServerException:1.0";
const char* DvdEx::ServerException::_PD_typeId = "Exception/UserException/DvdEx::ServerException";

DvdEx::ServerException* DvdEx::ServerException::_downcast(::CORBA::Exception* _e) {
  return (ServerException*) _NP_is_a(_e, _PD_typeId);
}

const DvdEx::ServerException* DvdEx::ServerException::_downcast(const ::CORBA::Exception* _e) {
  return (const ServerException*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* DvdEx::ServerException::_NP_duplicate() const {
  return new ServerException(*this);
}

const char* DvdEx::ServerException::_NP_typeId() const {
  return _PD_typeId;
}

const char* DvdEx::ServerException::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:DvdEx/ServerException:1.0");
  return _PD_repoId;
}
 
void DvdEx::ServerException::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
DvdEx::ServerException::operator>>= (cdrStream& _n) const
{
  _n.marshalString(reason,0);

}

void
DvdEx::ServerException::operator<<= (cdrStream& _n)
{
  reason = _n.unmarshalString(0);

}

DvdEx::DvdExRepository_ptr DvdEx::DvdExRepository_Helper::_nil() {
  return ::DvdEx::DvdExRepository::_nil();
}

::CORBA::Boolean DvdEx::DvdExRepository_Helper::is_nil(::DvdEx::DvdExRepository_ptr p) {
  return ::CORBA::is_nil(p);

}

void DvdEx::DvdExRepository_Helper::release(::DvdEx::DvdExRepository_ptr p) {
  ::CORBA::release(p);
}

void DvdEx::DvdExRepository_Helper::marshalObjRef(::DvdEx::DvdExRepository_ptr obj, cdrStream& s) {
  ::DvdEx::DvdExRepository::_marshalObjRef(obj, s);
}

DvdEx::DvdExRepository_ptr DvdEx::DvdExRepository_Helper::unmarshalObjRef(cdrStream& s) {
  return ::DvdEx::DvdExRepository::_unmarshalObjRef(s);
}

void DvdEx::DvdExRepository_Helper::duplicate(::DvdEx::DvdExRepository_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

DvdEx::DvdExRepository_ptr
DvdEx::DvdExRepository::_duplicate(::DvdEx::DvdExRepository_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

DvdEx::DvdExRepository_ptr
DvdEx::DvdExRepository::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


DvdEx::DvdExRepository_ptr
DvdEx::DvdExRepository::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

DvdEx::DvdExRepository_ptr
DvdEx::DvdExRepository::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_DvdExRepository _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_DvdExRepository* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_DvdExRepository;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* DvdEx::DvdExRepository::_PD_repoId = "IDL:DvdEx/DvdExRepository:1.0";


DvdEx::_objref_DvdExRepository::~_objref_DvdExRepository() {
  
}


DvdEx::_objref_DvdExRepository::_objref_DvdExRepository(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::DvdEx::DvdExRepository::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
DvdEx::_objref_DvdExRepository::_ptrToObjRef(const char* id)
{
  if (id == ::DvdEx::DvdExRepository::_PD_repoId)
    return (::DvdEx::DvdExRepository_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::DvdEx::DvdExRepository::_PD_repoId))
    return (::DvdEx::DvdExRepository_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}


//
// Code for DvdEx::DvdExRepository::_get_currentMaxProviderId

// Proxy call descriptor class. Mangled signature:
//  _clong
class _0RL_cd_8960fa0decf4ae72_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_8960fa0decf4ae72_00000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Long result;
};

void _0RL_cd_8960fa0decf4ae72_00000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_8960fa0decf4ae72_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_8960fa0decf4ae72_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_8960fa0decf4ae72_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_8960fa0decf4ae72_00000000* tcd = (_0RL_cd_8960fa0decf4ae72_00000000*)cd;
  DvdEx::_impl_DvdExRepository* impl = (DvdEx::_impl_DvdExRepository*) svnt->_ptrToInterface(DvdEx::DvdExRepository::_PD_repoId);
  tcd->result = impl->currentMaxProviderId();


}

::CORBA::Long DvdEx::_objref_DvdExRepository::currentMaxProviderId()
{
  _0RL_cd_8960fa0decf4ae72_00000000 _call_desc(_0RL_lcfn_8960fa0decf4ae72_10000000, "_get_currentMaxProviderId", 26);


  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for DvdEx::DvdExRepository::_get_currentMaxMediaId

// Local call call-back function.
static void
_0RL_lcfn_8960fa0decf4ae72_20000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_8960fa0decf4ae72_00000000* tcd = (_0RL_cd_8960fa0decf4ae72_00000000*)cd;
  DvdEx::_impl_DvdExRepository* impl = (DvdEx::_impl_DvdExRepository*) svnt->_ptrToInterface(DvdEx::DvdExRepository::_PD_repoId);
  tcd->result = impl->currentMaxMediaId();


}

::CORBA::Long DvdEx::_objref_DvdExRepository::currentMaxMediaId()
{
  _0RL_cd_8960fa0decf4ae72_00000000 _call_desc(_0RL_lcfn_8960fa0decf4ae72_20000000, "_get_currentMaxMediaId", 23);


  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for DvdEx::DvdExRepository::save

// Proxy call descriptor class. Mangled signature:
//  void
class _0RL_cd_8960fa0decf4ae72_30000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_8960fa0decf4ae72_30000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
    
  
  static const char* const _user_exns[];

  
};

const char* const _0RL_cd_8960fa0decf4ae72_30000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_8960fa0decf4ae72_40000000(omniCallDescriptor*, omniServant* svnt)
{
  
  DvdEx::_impl_DvdExRepository* impl = (DvdEx::_impl_DvdExRepository*) svnt->_ptrToInterface(DvdEx::DvdExRepository::_PD_repoId);
  impl->save();


}

void DvdEx::_objref_DvdExRepository::save()
{
  _0RL_cd_8960fa0decf4ae72_30000000 _call_desc(_0RL_lcfn_8960fa0decf4ae72_40000000, "save", 5);


  _invoke(_call_desc);



}


//
// Code for DvdEx::DvdExRepository::addProvider

// Proxy call descriptor class. Mangled signature:
//  void_i_cDvdEx_mDvdExProvider
class _0RL_cd_8960fa0decf4ae72_50000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_8960fa0decf4ae72_50000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  DvdEx::DvdExProvider_var arg_0_;
  const DvdEx::DvdExProvider* arg_0;
};

void _0RL_cd_8960fa0decf4ae72_50000000::marshalArguments(cdrStream& _n)
{
  (const DvdEx::DvdExProvider&) *arg_0 >>= _n;

}

void _0RL_cd_8960fa0decf4ae72_50000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new DvdEx::DvdExProvider;
  (DvdEx::DvdExProvider&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

const char* const _0RL_cd_8960fa0decf4ae72_50000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_8960fa0decf4ae72_60000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_8960fa0decf4ae72_50000000* tcd = (_0RL_cd_8960fa0decf4ae72_50000000*)cd;
  DvdEx::_impl_DvdExRepository* impl = (DvdEx::_impl_DvdExRepository*) svnt->_ptrToInterface(DvdEx::DvdExRepository::_PD_repoId);
  impl->addProvider(*tcd->arg_0);


}

void DvdEx::_objref_DvdExRepository::addProvider(const ::DvdEx::DvdExProvider& p)
{
  _0RL_cd_8960fa0decf4ae72_50000000 _call_desc(_0RL_lcfn_8960fa0decf4ae72_60000000, "addProvider", 12);
  _call_desc.arg_0 = &(::DvdEx::DvdExProvider&) p;

  _invoke(_call_desc);



}


//
// Code for DvdEx::DvdExRepository::delProvider

// Proxy call descriptor class. Mangled signature:
//  void_i_clong
class _0RL_cd_8960fa0decf4ae72_70000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_8960fa0decf4ae72_70000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
};

void _0RL_cd_8960fa0decf4ae72_70000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_8960fa0decf4ae72_70000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

const char* const _0RL_cd_8960fa0decf4ae72_70000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_8960fa0decf4ae72_80000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_8960fa0decf4ae72_70000000* tcd = (_0RL_cd_8960fa0decf4ae72_70000000*)cd;
  DvdEx::_impl_DvdExRepository* impl = (DvdEx::_impl_DvdExRepository*) svnt->_ptrToInterface(DvdEx::DvdExRepository::_PD_repoId);
  impl->delProvider(tcd->arg_0);


}

void DvdEx::_objref_DvdExRepository::delProvider(::CORBA::Long id)
{
  _0RL_cd_8960fa0decf4ae72_70000000 _call_desc(_0RL_lcfn_8960fa0decf4ae72_80000000, "delProvider", 12);
  _call_desc.arg_0 = id;

  _invoke(_call_desc);



}


//
// Code for DvdEx::DvdExRepository::getProvider

// Proxy call descriptor class. Mangled signature:
//  _cDvdEx_mDvdExProvider_i_clong_e_cDvdEx_mServerException
class _0RL_cd_8960fa0decf4ae72_90000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_8960fa0decf4ae72_90000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  DvdEx::DvdExProvider_var result;
};

void _0RL_cd_8960fa0decf4ae72_90000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_8960fa0decf4ae72_90000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

void _0RL_cd_8960fa0decf4ae72_90000000::marshalReturnedValues(cdrStream& _n)
{
  (const DvdEx::DvdExProvider&) result >>= _n;

}

void _0RL_cd_8960fa0decf4ae72_90000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new DvdEx::DvdExProvider;
  (DvdEx::DvdExProvider&)result <<= _n;

}

const char* const _0RL_cd_8960fa0decf4ae72_90000000::_user_exns[] = {
  DvdEx::ServerException::_PD_repoId
};

void _0RL_cd_8960fa0decf4ae72_90000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, DvdEx::ServerException::_PD_repoId)) {
    DvdEx::ServerException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_8960fa0decf4ae72_a0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_8960fa0decf4ae72_90000000* tcd = (_0RL_cd_8960fa0decf4ae72_90000000*)cd;
  DvdEx::_impl_DvdExRepository* impl = (DvdEx::_impl_DvdExRepository*) svnt->_ptrToInterface(DvdEx::DvdExRepository::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getProvider(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getProvider(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getProvider(tcd->arg_0);
    }
    catch(DvdEx::ServerException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

DvdEx::DvdExProvider* DvdEx::_objref_DvdExRepository::getProvider(::CORBA::Long id)
{
  _0RL_cd_8960fa0decf4ae72_90000000 _call_desc(_0RL_lcfn_8960fa0decf4ae72_a0000000, "getProvider", 12);
  _call_desc.arg_0 = id;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for DvdEx::DvdExRepository::getProviders

// Proxy call descriptor class. Mangled signature:
//  _cDvdEx_mDvdExProviderSeq_e_cDvdEx_mServerException
class _0RL_cd_8960fa0decf4ae72_b0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_8960fa0decf4ae72_b0000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  DvdEx::DvdExProviderSeq_var result;
};

void _0RL_cd_8960fa0decf4ae72_b0000000::marshalReturnedValues(cdrStream& _n)
{
  (const DvdEx::DvdExProviderSeq&) result >>= _n;

}

void _0RL_cd_8960fa0decf4ae72_b0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new DvdEx::DvdExProviderSeq;
  (DvdEx::DvdExProviderSeq&)result <<= _n;

}

const char* const _0RL_cd_8960fa0decf4ae72_b0000000::_user_exns[] = {
  DvdEx::ServerException::_PD_repoId
};

void _0RL_cd_8960fa0decf4ae72_b0000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, DvdEx::ServerException::_PD_repoId)) {
    DvdEx::ServerException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_8960fa0decf4ae72_c0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_8960fa0decf4ae72_b0000000* tcd = (_0RL_cd_8960fa0decf4ae72_b0000000*)cd;
  DvdEx::_impl_DvdExRepository* impl = (DvdEx::_impl_DvdExRepository*) svnt->_ptrToInterface(DvdEx::DvdExRepository::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getProviders();
#else
  if (!cd->is_upcall())
    tcd->result = impl->getProviders();
  else {
    try {
      tcd->result = impl->getProviders();
    }
    catch(DvdEx::ServerException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

DvdEx::DvdExProviderSeq* DvdEx::_objref_DvdExRepository::getProviders()
{
  _0RL_cd_8960fa0decf4ae72_b0000000 _call_desc(_0RL_lcfn_8960fa0decf4ae72_c0000000, "getProviders", 13);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for DvdEx::DvdExRepository::addMedia

// Proxy call descriptor class. Mangled signature:
//  void_i_cDvdEx_mDvdExMedia
class _0RL_cd_8960fa0decf4ae72_d0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_8960fa0decf4ae72_d0000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  DvdEx::DvdExMedia_var arg_0_;
  const DvdEx::DvdExMedia* arg_0;
};

void _0RL_cd_8960fa0decf4ae72_d0000000::marshalArguments(cdrStream& _n)
{
  (const DvdEx::DvdExMedia&) *arg_0 >>= _n;

}

void _0RL_cd_8960fa0decf4ae72_d0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new DvdEx::DvdExMedia;
  (DvdEx::DvdExMedia&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

const char* const _0RL_cd_8960fa0decf4ae72_d0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_8960fa0decf4ae72_e0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_8960fa0decf4ae72_d0000000* tcd = (_0RL_cd_8960fa0decf4ae72_d0000000*)cd;
  DvdEx::_impl_DvdExRepository* impl = (DvdEx::_impl_DvdExRepository*) svnt->_ptrToInterface(DvdEx::DvdExRepository::_PD_repoId);
  impl->addMedia(*tcd->arg_0);


}

void DvdEx::_objref_DvdExRepository::addMedia(const ::DvdEx::DvdExMedia& p)
{
  _0RL_cd_8960fa0decf4ae72_d0000000 _call_desc(_0RL_lcfn_8960fa0decf4ae72_e0000000, "addMedia", 9);
  _call_desc.arg_0 = &(::DvdEx::DvdExMedia&) p;

  _invoke(_call_desc);



}


//
// Code for DvdEx::DvdExRepository::delMedia

// Local call call-back function.
static void
_0RL_lcfn_8960fa0decf4ae72_f0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_8960fa0decf4ae72_70000000* tcd = (_0RL_cd_8960fa0decf4ae72_70000000*)cd;
  DvdEx::_impl_DvdExRepository* impl = (DvdEx::_impl_DvdExRepository*) svnt->_ptrToInterface(DvdEx::DvdExRepository::_PD_repoId);
  impl->delMedia(tcd->arg_0);


}

void DvdEx::_objref_DvdExRepository::delMedia(::CORBA::Long id)
{
  _0RL_cd_8960fa0decf4ae72_70000000 _call_desc(_0RL_lcfn_8960fa0decf4ae72_f0000000, "delMedia", 9);
  _call_desc.arg_0 = id;

  _invoke(_call_desc);



}


//
// Code for DvdEx::DvdExRepository::getMedia

// Proxy call descriptor class. Mangled signature:
//  _cDvdEx_mDvdExMedia_i_clong_e_cDvdEx_mServerException
class _0RL_cd_8960fa0decf4ae72_01000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_8960fa0decf4ae72_01000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  DvdEx::DvdExMedia_var result;
};

void _0RL_cd_8960fa0decf4ae72_01000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_8960fa0decf4ae72_01000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

void _0RL_cd_8960fa0decf4ae72_01000000::marshalReturnedValues(cdrStream& _n)
{
  (const DvdEx::DvdExMedia&) result >>= _n;

}

void _0RL_cd_8960fa0decf4ae72_01000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new DvdEx::DvdExMedia;
  (DvdEx::DvdExMedia&)result <<= _n;

}

const char* const _0RL_cd_8960fa0decf4ae72_01000000::_user_exns[] = {
  DvdEx::ServerException::_PD_repoId
};

void _0RL_cd_8960fa0decf4ae72_01000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, DvdEx::ServerException::_PD_repoId)) {
    DvdEx::ServerException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_8960fa0decf4ae72_11000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_8960fa0decf4ae72_01000000* tcd = (_0RL_cd_8960fa0decf4ae72_01000000*)cd;
  DvdEx::_impl_DvdExRepository* impl = (DvdEx::_impl_DvdExRepository*) svnt->_ptrToInterface(DvdEx::DvdExRepository::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getMedia(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getMedia(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getMedia(tcd->arg_0);
    }
    catch(DvdEx::ServerException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

DvdEx::DvdExMedia* DvdEx::_objref_DvdExRepository::getMedia(::CORBA::Long id)
{
  _0RL_cd_8960fa0decf4ae72_01000000 _call_desc(_0RL_lcfn_8960fa0decf4ae72_11000000, "getMedia", 9);
  _call_desc.arg_0 = id;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for DvdEx::DvdExRepository::getMediaOfType

// Proxy call descriptor class. Mangled signature:
//  _cDvdEx_mDvdExMediaSeq_i_cDvdEx_mGenre_e_cDvdEx_mServerException
class _0RL_cd_8960fa0decf4ae72_21000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_8960fa0decf4ae72_21000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  DvdEx::Genre arg_0;
  DvdEx::DvdExMediaSeq_var result;
};

void _0RL_cd_8960fa0decf4ae72_21000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_8960fa0decf4ae72_21000000::unmarshalArguments(cdrStream& _n)
{
  (DvdEx::Genre&)arg_0 <<= _n;

}

void _0RL_cd_8960fa0decf4ae72_21000000::marshalReturnedValues(cdrStream& _n)
{
  (const DvdEx::DvdExMediaSeq&) result >>= _n;

}

void _0RL_cd_8960fa0decf4ae72_21000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new DvdEx::DvdExMediaSeq;
  (DvdEx::DvdExMediaSeq&)result <<= _n;

}

const char* const _0RL_cd_8960fa0decf4ae72_21000000::_user_exns[] = {
  DvdEx::ServerException::_PD_repoId
};

void _0RL_cd_8960fa0decf4ae72_21000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, DvdEx::ServerException::_PD_repoId)) {
    DvdEx::ServerException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_8960fa0decf4ae72_31000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_8960fa0decf4ae72_21000000* tcd = (_0RL_cd_8960fa0decf4ae72_21000000*)cd;
  DvdEx::_impl_DvdExRepository* impl = (DvdEx::_impl_DvdExRepository*) svnt->_ptrToInterface(DvdEx::DvdExRepository::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getMediaOfType(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getMediaOfType(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getMediaOfType(tcd->arg_0);
    }
    catch(DvdEx::ServerException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

DvdEx::DvdExMediaSeq* DvdEx::_objref_DvdExRepository::getMediaOfType(::DvdEx::Genre type)
{
  _0RL_cd_8960fa0decf4ae72_21000000 _call_desc(_0RL_lcfn_8960fa0decf4ae72_31000000, "getMediaOfType", 15);
  _call_desc.arg_0 = type;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for DvdEx::DvdExRepository::getMediaYoungerThan

// Proxy call descriptor class. Mangled signature:
//  _cDvdEx_mDvdExMediaSeq_i_cshort_e_cDvdEx_mServerException
class _0RL_cd_8960fa0decf4ae72_41000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_8960fa0decf4ae72_41000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  ::CORBA::Short arg_0;
  DvdEx::DvdExMediaSeq_var result;
};

void _0RL_cd_8960fa0decf4ae72_41000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_8960fa0decf4ae72_41000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Short&)arg_0 <<= _n;

}

void _0RL_cd_8960fa0decf4ae72_41000000::marshalReturnedValues(cdrStream& _n)
{
  (const DvdEx::DvdExMediaSeq&) result >>= _n;

}

void _0RL_cd_8960fa0decf4ae72_41000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new DvdEx::DvdExMediaSeq;
  (DvdEx::DvdExMediaSeq&)result <<= _n;

}

const char* const _0RL_cd_8960fa0decf4ae72_41000000::_user_exns[] = {
  DvdEx::ServerException::_PD_repoId
};

void _0RL_cd_8960fa0decf4ae72_41000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, DvdEx::ServerException::_PD_repoId)) {
    DvdEx::ServerException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_8960fa0decf4ae72_51000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_8960fa0decf4ae72_41000000* tcd = (_0RL_cd_8960fa0decf4ae72_41000000*)cd;
  DvdEx::_impl_DvdExRepository* impl = (DvdEx::_impl_DvdExRepository*) svnt->_ptrToInterface(DvdEx::DvdExRepository::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getMediaYoungerThan(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getMediaYoungerThan(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getMediaYoungerThan(tcd->arg_0);
    }
    catch(DvdEx::ServerException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

DvdEx::DvdExMediaSeq* DvdEx::_objref_DvdExRepository::getMediaYoungerThan(::CORBA::Short year)
{
  _0RL_cd_8960fa0decf4ae72_41000000 _call_desc(_0RL_lcfn_8960fa0decf4ae72_51000000, "getMediaYoungerThan", 20);
  _call_desc.arg_0 = year;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for DvdEx::DvdExRepository::getMediaAvailable

// Proxy call descriptor class. Mangled signature:
//  _cDvdEx_mDvdExMediaSeq_e_cDvdEx_mServerException
class _0RL_cd_8960fa0decf4ae72_61000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_8960fa0decf4ae72_61000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  DvdEx::DvdExMediaSeq_var result;
};

void _0RL_cd_8960fa0decf4ae72_61000000::marshalReturnedValues(cdrStream& _n)
{
  (const DvdEx::DvdExMediaSeq&) result >>= _n;

}

void _0RL_cd_8960fa0decf4ae72_61000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new DvdEx::DvdExMediaSeq;
  (DvdEx::DvdExMediaSeq&)result <<= _n;

}

const char* const _0RL_cd_8960fa0decf4ae72_61000000::_user_exns[] = {
  DvdEx::ServerException::_PD_repoId
};

void _0RL_cd_8960fa0decf4ae72_61000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, DvdEx::ServerException::_PD_repoId)) {
    DvdEx::ServerException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_8960fa0decf4ae72_71000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_8960fa0decf4ae72_61000000* tcd = (_0RL_cd_8960fa0decf4ae72_61000000*)cd;
  DvdEx::_impl_DvdExRepository* impl = (DvdEx::_impl_DvdExRepository*) svnt->_ptrToInterface(DvdEx::DvdExRepository::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getMediaAvailable();
#else
  if (!cd->is_upcall())
    tcd->result = impl->getMediaAvailable();
  else {
    try {
      tcd->result = impl->getMediaAvailable();
    }
    catch(DvdEx::ServerException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

DvdEx::DvdExMediaSeq* DvdEx::_objref_DvdExRepository::getMediaAvailable()
{
  _0RL_cd_8960fa0decf4ae72_61000000 _call_desc(_0RL_lcfn_8960fa0decf4ae72_71000000, "getMediaAvailable", 18);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}

DvdEx::_pof_DvdExRepository::~_pof_DvdExRepository() {}


omniObjRef*
DvdEx::_pof_DvdExRepository::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::DvdEx::_objref_DvdExRepository(ior, id);
}


::CORBA::Boolean
DvdEx::_pof_DvdExRepository::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::DvdEx::DvdExRepository::_PD_repoId))
    return 1;
  
  return 0;
}

const DvdEx::_pof_DvdExRepository _the_pof_DvdEx_mDvdExRepository;

DvdEx::_impl_DvdExRepository::~_impl_DvdExRepository() {}


::CORBA::Boolean
DvdEx::_impl_DvdExRepository::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "_get_currentMaxProviderId")) {

    _0RL_cd_8960fa0decf4ae72_00000000 _call_desc(_0RL_lcfn_8960fa0decf4ae72_10000000, "_get_currentMaxProviderId", 26, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "_get_currentMaxMediaId")) {

    _0RL_cd_8960fa0decf4ae72_00000000 _call_desc(_0RL_lcfn_8960fa0decf4ae72_20000000, "_get_currentMaxMediaId", 23, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "save")) {

    _0RL_cd_8960fa0decf4ae72_30000000 _call_desc(_0RL_lcfn_8960fa0decf4ae72_40000000, "save", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "addProvider")) {

    _0RL_cd_8960fa0decf4ae72_50000000 _call_desc(_0RL_lcfn_8960fa0decf4ae72_60000000, "addProvider", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "delProvider")) {

    _0RL_cd_8960fa0decf4ae72_70000000 _call_desc(_0RL_lcfn_8960fa0decf4ae72_80000000, "delProvider", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getProvider")) {

    _0RL_cd_8960fa0decf4ae72_90000000 _call_desc(_0RL_lcfn_8960fa0decf4ae72_a0000000, "getProvider", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getProviders")) {

    _0RL_cd_8960fa0decf4ae72_b0000000 _call_desc(_0RL_lcfn_8960fa0decf4ae72_c0000000, "getProviders", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "addMedia")) {

    _0RL_cd_8960fa0decf4ae72_d0000000 _call_desc(_0RL_lcfn_8960fa0decf4ae72_e0000000, "addMedia", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "delMedia")) {

    _0RL_cd_8960fa0decf4ae72_70000000 _call_desc(_0RL_lcfn_8960fa0decf4ae72_f0000000, "delMedia", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getMedia")) {

    _0RL_cd_8960fa0decf4ae72_01000000 _call_desc(_0RL_lcfn_8960fa0decf4ae72_11000000, "getMedia", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getMediaOfType")) {

    _0RL_cd_8960fa0decf4ae72_21000000 _call_desc(_0RL_lcfn_8960fa0decf4ae72_31000000, "getMediaOfType", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getMediaYoungerThan")) {

    _0RL_cd_8960fa0decf4ae72_41000000 _call_desc(_0RL_lcfn_8960fa0decf4ae72_51000000, "getMediaYoungerThan", 20, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getMediaAvailable")) {

    _0RL_cd_8960fa0decf4ae72_61000000 _call_desc(_0RL_lcfn_8960fa0decf4ae72_71000000, "getMediaAvailable", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
DvdEx::_impl_DvdExRepository::_ptrToInterface(const char* id)
{
  if (id == ::DvdEx::DvdExRepository::_PD_repoId)
    return (::DvdEx::_impl_DvdExRepository*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::DvdEx::DvdExRepository::_PD_repoId))
    return (::DvdEx::_impl_DvdExRepository*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
DvdEx::_impl_DvdExRepository::_mostDerivedRepoId()
{
  return ::DvdEx::DvdExRepository::_PD_repoId;
}

POA_DvdEx::DvdExRepository::~DvdExRepository() {}

